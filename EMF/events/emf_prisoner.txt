namespace = emf_prisoner

## Ransom All events
## 0-9 reserved
# These are hideous and badly need some attention

# Plus/Minus values
# Close Relative = +5
# Base Reluctance = -2

# Opinion 26 = +4
# Opinion 17 = +3
# Opinion 11 = +2 (sufficient)
# Opinion 8 = +2 (insufficient)
# Opinion -4 = -1

# Rulers ransom themselves, always
# Non-rulers are ransomed by their lieges
# Non-rulers are only ransomed if they're "close relatives"
# If they're dynasty members of their liege, they will be ransomed if liege likes them enough
# The close relative price also applies to anyone who is a close relative of a ruler, if that ruler is not their liege

#			Ruler	Relative	Dynasty
# Emp = 	385		110			10
# King = 	250		74
# Duke = 	145		46
# Count = 	70		26
# Baron = 	25		14

# Wiki says: generally, AI rulers will accept offers to ransom themselves, spouses, close kin, or courtiers rich enough to reimburse the ransom. The AI will often refuse to grant ransom to characters who hold claims on their titles. (NEED TO INVESTIGATE THIS)

# Determine who pays ransom
character_event = {
	id = emf_prisoner.0
	desc = emf_prisoner.0.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes
	
	option = { # Rulers pay their own
		trigger = { is_landed = yes }
		name = emf_prisoner.0.a

		if = {
			limit = { tier = EMPEROR }
			wealth = -385
			host = { wealth = 385 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = KING }			
			wealth = -250
			host = { wealth = 250 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = DUKE }
			wealth = -145
			host = { wealth = 145 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = COUNT }
			wealth = -70
			host = { wealth = 70 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = BARON }
			wealth = -25
			host = { wealth = 25 }
			prisoner = no
			break = yes
		}
	}
	
	option = { # Liege is responsible for others
		trigger = { is_landed = no }
		name = OK
		
		liege = {
			character_event = { id = emf_prisoner.1 }
		}
	}
	
	option = { # Refuse
		trigger = { ai = no }
		name = emf_prisoner.0.b
	}
}

# Ask Liege for ransom - FROM is prisoner, FROMFROM is FROM's host
character_event = {
	id = emf_prisoner.1
	desc = emf_prisoner.1.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes
	
	trigger = {
		or = { # Willing to pay
			ai = no
			is_close_relative = FROM
			and = {
				dynasty = FROM
				opinion = { who = FROM value = 10 }
			}
		}
		or = { # Have the cash needed
			and = { # Child
				or = {
					is_father = FROM
					is_mother = FROM
				}
				or = {
					and = {
						tier = EMPEROR
						wealth = 110
					}
					and = {
						tier = KING
						wealth = 74
					}
					and = {
						tier = DUKE
						wealth = 46
					}
					and = {
						tier = COUNT
						wealth = 26
					}
					and = {
						tier = BARON
						wealth = 14
					}
				}
			}
			and = { # Spouses who aren't your child; curse you cybr!
				is_married = FROM
				not = { is_father = FROM }
				not = { is_mother = FROM }
				FROM = {
					or = {
						and = {
							or = {
								father = {
									is_alive = yes
									tier = EMPEROR
								}
								mother = {
									is_alive = yes
									tier = EMPEROR
								}
							}
							ROOT = { wealth = 110 }
						}
						and = {
							or = {
								father = {
									is_alive = yes
									tier = KING
								}
								mother = {
									is_alive = yes
									tier = KING
								}
							}
							ROOT = { wealth = 74 }
						}
						and = {
							or = {
								father = {
									is_alive = yes
									tier = DUKE
								}
								mother = {
									is_alive = yes
									tier = DUKE
								}
							}
							ROOT = { wealth = 46 }
						}
						and = {
							or = {
								father = {
									is_alive = yes
									tier = COUNT
								}
								mother = {
									is_alive = yes
									tier = COUNT
								}
							}
							ROOT = { wealth = 26 }
						}
						and = {
							or = {
								father = {
									is_alive = yes
									tier = BARON
								}
								mother = {
									is_alive = yes
									tier = BARON
								}
							}
							ROOT = { wealth = 14 }
						}
						and = {
							father = {
								or = {
									is_alive = no
									is_landed = no
								}
							}
							mother = {
								or = {
									is_alive = no
									is_landed = no
								}
							}
							ROOT = { wealth = 10 }
						}
					}
				}
			}
			and = { # Other close relative or dynasty member
				not = { is_married = FROM }
				not = { is_father = FROM }
				not = { is_mother = FROM }
				or = {
					is_close_relative = FROM # Is some other close relative
					and = { # Dynasty member liege likes
						dynasty = FROM
						opinion = { who = FROM value = 10 }
					}
				}
				wealth = 10
			}
		}
	}
	
	option = { # Will pay - Child
		trigger = {
			or = {
				is_father = FROM
				is_mother = FROM
			}
		}
		name = emf_prisoner.1.a

		if = {
			limit = { tier = EMPEROR }
			wealth = -110
			FROMFROM = { wealth = 110 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = { tier = KING }
			wealth = -74
			FROMFROM = { wealth = 74 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = { tier = DUKE }
			wealth = -46
			FROMFROM = { wealth = 46 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = { tier = COUNT }
			wealth = -26
			FROMFROM = { wealth = 26 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = { tier = BARON }
			wealth = -14
			FROMFROM = { wealth = 14 }
			FROM = { prisoner = no }
			break = yes
		}
		ai_chance = {
			factor = 1
		}
	}
	option = { # Will pay - Spouse
		trigger = {
			is_married = FROM
			not = { is_father = FROM }
			not = { is_mother = FROM }
		}
		name = emf_prisoner.1.a
		
		if = {
			limit = {
				or = {
					FROM = {
						father = {
							is_alive = yes
							tier = EMPEROR
						}
						mother = {
							is_alive = yes
							tier = EMPEROR
						}
					}
				}
			}
			wealth = -110
			FROMFROM = { wealth = 110 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = {
				FROM = {
					or = {
						father = {
							is_alive = yes
							tier = KING
						}
						mother = {
							is_alive = yes
							tier = KING
						}
					}
				}
			}
			wealth = -74
			FROMFROM = { wealth = 74 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = {
				FROM = {
					or = {
						father = {
							is_alive = yes
							tier = DUKE
						}
						mother = {
							is_alive = yes
							tier = DUKE
						}
					}
				}
			}
			wealth = -46
			FROMFROM = { wealth = 46 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = {
				FROM = {
					or = {
						father = {
							is_alive = yes
							tier = COUNT
						}
						mother = {
							is_alive = yes
							tier = COUNT
						}
					}
				}
			}
			wealth = -26
			FROMFROM = { wealth = 26 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = {
				FROM = {
					or = {
						father = {
							is_alive = yes
							tier = BARON
						}
						mother = {
							is_alive = yes
							tier = BARON
						}
					}
				}
			}
			wealth = -14
			FROMFROM = { wealth = 14 }
			FROM = { prisoner = no }
			break = yes
		}
		if = {
			limit = {
				FROM = {
					father = {
						or = {
							is_alive = no
							is_landed = no
						}
					}
					mother = {
						or = {
							is_alive = no
							is_landed = no
						}
					}
				}
			}
			wealth = -10
			FROMFROM = { wealth = 10 }
			FROM = { prisoner = no }
			break = yes
		}
		ai_chance = {
			factor = 1
		}
	}
	option = { # Will pay - Other close relative or dynasty member
		trigger = {
			not = { is_married = FROM }
			not = { is_father = FROM }
			not = { is_mother = FROM }
			or = {
				is_close_relative = FROM # Is some other close relative
				and = { # Or a dynasty member the liege likes
					dynasty = FROM
					opinion = { who = FROM value = 10 }
				}
			}
		}
		name = emf_prisoner.1.a
		
		wealth = -10
		FROMFROM = { wealth = 10 }
		FROM = { prisoner = no }
		ai_chance = {
			factor = 1
		}
	}
	option = { # Won't pay
		trigger = { ai = no }
		name = emf_prisoner.1.b
		
		hidden_tooltip = {
			FROMFROM = {
				character_event = { id = emf_prisoner.2 }
			}
		}
	}
}

# Notification of ransom denial
character_event = {
	id = emf_prisoner.2
	desc = emf_prisoner.2.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes

	option = {
		name = emf_prisoner.2.a
	}
}

## Prisoner Exchange events
## 10-19 reserved
# These also badly need to be fixed up
#Prisoner exchange
character_event = {
	id = emf_prisoner.10
	desc = meneth.213.desc
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	option = {
		name = meneth.213.a
		trigger = {
			FROMFROM = {
				any_courtier = {
					dynasty = ROOT
					prisoner = yes
					is_landed = no
				}
			}
		}
		FROMFROM = { clr_character_flag = prisoner_exchange_attempted }
		FROM = {
			prisoner = no
		}
		FROMFROM = {
			random_courtier = {
				limit = {
					is_close_relative = ROOT
					dynasty = ROOT
					prisoner = yes
					is_landed = no
				}
				prisoner = no
			}
			if = {
				limit = {
					NOT = {
						any_courtier = {
							is_close_relative = ROOT
							dynasty = ROOT
							prisoner = yes
							is_landed = no
						}
					}
				}
				random_courtier = {
					limit = {
						dynasty = ROOT
						prisoner = yes
						is_landed = no
					}
					prisoner = no
				}
			}
			character_event = { id = emf_prisoner.11 } #Prisoner exchange succeeded
		}
	}
	option = {
		name = meneth.213.b
		trigger = {
			OR = {
				ai = no
				NOT = {
					FROMFROM = {
						any_courtier = {
							dynasty = ROOT
							prisoner = yes
							is_landed = no
						}
					}
				}
			}
		}
		FROMFROM = { clr_character_flag = prisoner_exchange_attempted }
		FROMFROM = { character_event = { id = emf_prisoner.12 } } #Prisoner exchange fails
	}
}

#Prisoner exchange succeeds
character_event = {
	id = emf_prisoner.11
	desc = meneth.214.desc
	picture = GFX_evt_garden
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
	}
}

#Prisoner exchange fails
character_event = {
	id = emf_prisoner.12
	desc = meneth.215.desc
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	option = {
		name = CURSES
	}
}


## Prisoner Handling events
## 20-29 reserved
# House Arrest event
character_event = {
	id = emf_prisoner.20
	# Adults, more or less
	desc = {
		text = emf_prisoner.20.desc_dungeon
		trigger = {
			has_character_modifier = the_dungeon
			age = 12
			not = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.20.desc_oubliette
		trigger = {
			has_character_modifier = the_oubliette
			age = 12
			not = { trait = incapable }
		}
	}
	# Kids
	desc = {
		text = emf_prisoner.20.desc_kid
		trigger = {
			age = 4
			not = { age = 12 }
			not = { trait = incapable }
		}
	}
	# Incapable or very young
	desc = {
		text = emf_prisoner.20.desc_incapable
		trigger = {
			or = {
				not = { age = 4 }
				trait = incapable
			}
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue
	is_triggered_only = yes
	
	option = {
		name = { # Adult, more or less
			text = emf_prisoner.20.a_adult
			trigger = {
				age = 12
				not = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.20.a_kid
			trigger = {
				age = 4
				not = { age = 12 }
				not = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.20.a_incapable
			trigger = {
				or = {
					not = { age = 4 }
					trait = incapable
				}
			}
		}

		hidden_tooltip = {
			remove_character_modifier = house_arrest
			remove_character_modifier = the_dungeon
			remove_character_modifier = the_oubliette
		}
		if = {
			limit = { prisoner = yes }
			add_character_modifier = { 
				name = house_arrest
				duration = -1
			}
		}
	}
}

# Oubliette event
character_event = {
	id = emf_prisoner.21
	# Adult, more or less
	desc = {
		text = emf_prisoner.21.desc_house
		trigger = {
			has_character_modifier = house_arrest
			age = 12
			not = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.21.desc_dungeon
		trigger = {
			has_character_modifier = the_dungeon
			age = 12
			not = { trait = incapable }
		}
	}
	# Kids
	desc = {
		text = emf_prisoner.21.desc_kid_house
		trigger = {
			has_character_modifier = house_arrest
			age = 4
			not = { age = 12 }
			not = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.21.desc_kid_dungeon
		trigger = {
			has_character_modifier = the_dungeon
			age = 4
			not = { age = 12 }
			not = { trait = incapable }
		}
	}
	# Incapable or very young
	desc = {
		text = emf_prisoner.21.desc_incapable
		trigger = {
			or = {
				not = { age = 4 }
				trait = incapable
			}
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue
	is_triggered_only = yes
	
	option = {
		name = { # Adult, more or less
			text = emf_prisoner.21.a_adult
			trigger = {
				age = 12
				not = { trait = incapable }
			}
		}
		name = { # Kid from house arrest
			text = emf_prisoner.21.a_kid_house
			trigger = {
				has_character_modifier = house_arrest
				age = 4
				not = { age = 12 }
				not = { trait = incapable }
			}
		}
		name = { # Kid from dungeon
			text = emf_prisoner.21.a_kid_dungeon
			trigger = {
				has_character_modifier = the_dungeon
				age = 4
				not = { age = 12 }
				not = { trait = incapable }
			}
		}
		name = { # Incapable or very young
			text = emf_prisoner.21.a_incapable
			trigger = {
				or = {
					not = { age = 4 }
					trait = incapable
				}
			}
		}

		hidden_tooltip = {
			remove_character_modifier = house_arrest
			remove_character_modifier = the_dungeon
			remove_character_modifier = the_oubliette
		}
		if = {
			limit = { prisoner = yes }
			add_character_modifier = { 
				name = the_oubliette
				duration = -1
			}
		}
	}
}

# Dungeon event
character_event = {
	id = emf_prisoner.22
	# Adult
	desc = {
		text = emf_prisoner.22.desc_house
		trigger = {
			has_character_modifier = house_arrest
			age = 12
			not = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.22.desc_oubliette
		trigger = {
			has_character_modifier = the_oubliette
			age = 12
			not = { trait = incapable }
		}
	}
	# Kids
	desc = {
		text = emf_prisoner.22.desc_kid_house
		trigger = {
			has_character_modifier = house_arrest
			age = 4
			not = { age = 12 }
			not = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.22.desc_kid_oubliette
		trigger = {
			has_character_modifier = the_oubliette
			age = 4
			not = { age = 12 }
			not = { trait = incapable }
		}
	}
	# Incapable or very young
	desc = {
		text = emf_prisoner.22.desc_incapable
		trigger = {
			or = {
				not = { age = 4 }
				trait = incapable
			}
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue
	is_triggered_only = yes
	
	option = {
		# Adult
		name = {
			text = emf_prisoner.22.a_house
			trigger = {
				has_character_modifier = house_arrest
				age = 12
				not = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.22.a_oubliette
			trigger = {
				has_character_modifier = the_oubliette
				age = 12
				not = { trait = incapable }
			}
		}
		# Kids
		name = {
			text = emf_prisoner.22.a_kid_house
			trigger = {
				has_character_modifier = house_arrest
				age = 4
				not = { age = 12 }
				not = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.22.a_kid_oubliette
			trigger = {
				has_character_modifier = the_oubliette
				age = 4
				not = { age = 12 }
				not = { trait = incapable }
			}
		}
		# Incapable or very young
		name = {
			text = emf_prisoner.22.a_incapable
			trigger = {
				or = {
					not = { age = 4 }
					trait = incapable
				}
			}
		}

		hidden_tooltip = {
			remove_character_modifier = house_arrest
			remove_character_modifier = the_dungeon
			remove_character_modifier = the_oubliette
		}
		if = {
			limit = { prisoner = yes }
			add_character_modifier = { 
				name = the_dungeon
				duration = -1
			}
		}
	}
}

## Prisoner Transfer events
## 30-39 reserved
# Liege requests prisoner transfer - FROMFROM is liege, FROM is prisoner
character_event = {
	id = emf_prisoner.30
	desc = emf_prisoner.30.desc
	picture = GFX_evt_into_the_dungeon
	hide_from = yes
	show_from_from = yes
	is_triggered_only = yes
	
	option = { # Transfer prisoner
		name = emf_prisoner.30.a
		
		FROM = {
			custom_tooltip = { text = emf_prisoner.30.a_tt }
			hidden_tooltip = {
				prisoner = no
				imprison = FROMFROM
			}
		}
		ai_chance = {
			factor = 4
			modifier = {
				factor = 2
				trait = just
			}
			modifier = {
				factor = 2
				trait = charitable
			}
			modifier = {
				factor = 2
				trait = kind
			}
			modifier = { # Likes liege
				factor = 4
				opinion = { who = FROMFROM value = 0 }
			}
			modifier = { # Barons and Counts seldom refuse
				factor = 4
				lower_tier_than = DUKE
			}
		}
	}
	option = { # Refuse
		name = emf_prisoner.30.b
		
		FROMFROM = { # Notify liege
			hidden_tooltip = {
				character_event = { id = emf_prisoner.31 }
			}
			opinion = {
				who = ROOT
				modifier = opinion_refused_prisoner_transfer
				months = 60
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				trait = greedy
			}
			modifier = {
				factor = 2
				trait = envious
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = { # Dislikes liege
				factor = 4
				not = {
					opinion = { who = FROMFROM value = 0 }
				}
			}
		}
	}
}

# Notify liege of refusal
character_event = {
	id = emf_prisoner.31
	desc = emf_prisoner.31.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes
	
	option = {
		name = emf_prisoner.31.a
		
		tooltip = {
			opinion = {
				who = FROM
				modifier = opinion_refused_prisoner_transfer
				months = 60
			}
		}
	}
}

# AI prisoner transfer event
character_event = {
	id = emf_prisoner.32
	hide_window = yes
	
	ai = yes
	only_playable = yes
	only_capable = yes
	prisoner = no
	min_age = 16
	
	trigger = {
		war = yes
		any_current_enemy = {
			prisoner = yes
			host = { is_liege_or_above = ROOT }
		}
	}
	mean_time_to_happen = {
		days = 1
	}
	
	immediate = {
		any_current_enemy = {
			limit = {
				prisoner = yes
				host = { is_liege_or_above = ROOT }
			}
			character_event = { id = emf_prisoner.33 }
		}
	}
	
	option = {
		name = OK
	}
}

# AI prisoner bounce event
character_event = {
	id = emf_prisoner.33
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		host = {
			character_event = { id = emf_prisoner.30 }
		}
	}
	
	option = {
		name = OK
	}
}
