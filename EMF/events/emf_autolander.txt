namespace = emf_autolander
	
# TODO:
# - Support gender_equality and succ_enatic_cognatic and succ_enatic: pick females too
#   when appropriate.
# - Support automatic distribution of recently-built titles baron-tier titles that cannot
#   be legally held by the liege (e.g., if you build a couple new cities in your demesne
#   and aren't a patrician, then autolander should be able to automate grants of those
#   titles with characters specifically suited for the holding_type (e.g., priests holding
#   new temples for non-muslims).
# - Potentially support the option of converting a feudal county into a republican county
#   or vice versa if both a castle and a city are newly-acquired within the county. Could
#   do the same for promoting prince-bishropics or feudalizing them. It would simply be a
#   matter of being sure to grant the new noble the proper type of holding first, then making
#   that holding the province_capital.


# emf_autolander.1
# Title transfer listener for applying Recently Acquired
#
# Taps: on_new_holder (grants + territory gained through gain_all_occupied_titles, gain_title, etc.)
#       on_new_holder_usurpation (general usurpation)
#       on_new_holder_inheritance (inheritance)
#
character_event = {
	id = emf_autolander.1
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes
	
	ai = no
	
	trigger = {
		FROM = {
			tier = count
		}
	}
	
	immediate = {
		FROM = {
			location = {
				remove_province_modifier = emf_mod_recently_acquired
				add_province_modifier = { name = emf_mod_recently_acquired duration = 120 }
			}
		}
	}
	
	option = { name = OK }
}


# emf_autolander.2 [Player]
#
# Recursive event for non-interactive land distribution (multiplayer)
character_event = {
	id = emf_autolander.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_demesne_title = {
			tier = count
			location = {
				has_province_modifier = emf_mod_recently_acquired
			}
			not = {
				ROOT = {
					capital_scope = {
						duchy = {
							de_jure_vassal_or_below = PREVPREVPREV
						}
					}
				}
			}
			can_be_given_away = yes
		}
	}
	
	option = {
		name = OK
		
		random_demesne_title = {
			limit = {
				tier = count
				location = {
					has_province_modifier = emf_mod_recently_acquired
				}
				not = {
					ROOT = {
						capital_scope = {
							duchy = {
								de_jure_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				can_be_given_away = yes
			}

			save_event_target_as = target_county

			create_random_steward = {
				random_traits = yes
				religion = ROOT
				culture = ROOT
				dynasty = random
				female = no
				fertility = 0.5
				health = 5
			}
			new_character = {
				hidden_tooltip = {
					if = {
						limit = {
							religion_group = indian_group
						}
						add_trait = kshatriya
						character_event = { id = RoI.30121 }
					}
					
					character_event = { id = emf_autolander.10 } # Grant target_county
				}
			}
		}
		
		character_event = { id = emf_autolander.2 } # Tail-recurse
	}
}

# emf_autolander.3 [Player]
#
# County selection (only for interactive/singleplayer mode)
# Reentrant
character_event = {
	id = emf_autolander.3
	hide_window = yes
	is_triggered_only = yes
	
	option = {
		name = OK
		
		#log = "emf_autolander.3: ROOT='[Root.GetTitledName]', FROM='[From.GetTitledName]', FROMFROM='[FromFrom.GetTitledName]'"
		
		if = {
			limit = {
				not = {
					any_demesne_title = {
						tier = count
						not = { has_title_flag = emf_autolander_spare }
						location = {
							has_province_modifier = emf_mod_recently_acquired
						}
						not = {
							ROOT = {
								capital_scope = {
									duchy = {
										de_jure_vassal_or_below = PREVPREVPREV
									}
								}
							}
						}
						can_be_given_away = yes
					}
				}
			}
			
			#log = "emf_autolander.3: Iteration DONE"
			
			# Cleanup. We're done prompting for this round.
			any_demesne_title = {
				limit = { tier = count }
				clr_title_flag = emf_autolander_spare
			}
			
			break = yes
		}
		
		random_demesne_title = {
			limit = {
				tier = count
				not = { has_title_flag = emf_autolander_spare }
				location = {
					has_province_modifier = emf_mod_recently_acquired
				}
				not = {
					ROOT = {
						capital_scope = {
							duchy = {
								de_jure_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				can_be_given_away = yes
			}
			
			save_event_target_as = target_county
		}
		
		#log = "emf_autolander.3: target_county='[target_county.GetFullName]'"
		
		# Potentially flip the province capital (will change best_fit_character_for_title).
		# NOTE: Engine should already do it automatically for players.
		# character_event = { id = emf_autolander.9 }
		
		event_target:target_county = {
			if = {
				limit = {
					num_fitting_characters_for_title = 1
					not = { num_fitting_characters_for_title = 2 }
				}
				
				#log = "emf_autolander.3: num_fitting_characters_for_title == 1"
			
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 1 				# The index of the character in the list
					
					character_event = { id = emf_autolander.8 }
					if = {
						limit = { has_character_flag = grant_ok }
						save_event_target_as = char_one
						clr_character_flag = grant_ok
					}
				}
			}
			if = {
				limit = {
					num_fitting_characters_for_title = 2
				}
				
				#log = "emf_autolander.3: num_fitting_characters_for_title >= 2"
				
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 1 				# The index of the character in the list

					character_event = { id = emf_autolander.8 }
					if = {
						limit = { has_character_flag = grant_ok }
						save_event_target_as = char_one
						clr_character_flag = grant_ok
					}
				}
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 2 				# The index of the character in the list

					character_event = { id = emf_autolander.8 }
					if = {
						limit = { has_character_flag = grant_ok }
						save_event_target_as = char_two
						clr_character_flag = grant_ok
					}
				}
				
				if = {
					limit = { event_target:char_one = { character = event_target:char_two } }
					#log = "emf_autolander.3: Deduplicating char_one and char_two (!)"
					clear_event_target = char_two # Fucking weird, yo.
				}
				
				if = {
					limit = { # Even more weird...
						not = { event_target:char_one = { always = yes } }
						event_target:char_two = { always = yes }
					}
					#log = "emf_autolander.3: Renaming char_two to char_one (!)"
					event_target:char_two = { save_event_target_as = char_one }
					clear_event_target = char_two
				}
			}
		}
		
		#log = "emf_autolander.3: char_one='[char_one.GetTitledName]'"
		#log = "emf_autolander.3: char_two='[char_two.GetTitledName]'"
		
		if = {
			limit = { event_target:char_one = { always = yes } }

			#log = "emf_autolander.3: Directing to char_one"
			
			event_target:char_one = {
				character_event = { id = emf_autolander.4 }
			}
			break = yes
		}
		
		#log = "emf_autolander.3: Directing to player"
		character_event = { id = emf_autolander.4 } # The show must go on
	}
}


character_event = {
	id = emf_autolander.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		clear_event_target = char_one
		
		#log = "emf_autolander.4: ROOT='[Root.GetTitledName]', FROM='[From.GetTitledName]', FROMFROM='[FromFrom.GetTitledName]'"
		
		if = {
			limit = {
				not = { event_target:char_two = { always = yes } }
			}
			#log = "emf_autolander.4: Directing to player"
			FROM = { character_event = { id = emf_autolander.5 } } # The show must go on
			break = yes
		}
		
		event_target:char_two = {
			#log = "emf_autolander.4: Directing to char_two"
			character_event = { id = emf_autolander.5 }
		}
	}
}


character_event = {
	id = emf_autolander.5
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		clear_event_target = char_two
		#log = "emf_autolander.5: ROOT='[Root.GetTitledName]', FROM='[From.GetTitledName]', FROMFROM='[FromFrom.GetTitledName]'"
		FROMFROM = { character_event = { id = emf_autolander.7 } }
	}
}


character_event = {
	id = emf_autolander.7
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		character_event = { id = emf_autolander.6 }
	}
}


# emf_autolander.6 [Player]
#
# Main province prompt event
character_event = {
	id = emf_autolander.6
	desc = emf_autolander.6.desc
	picture = GFX_evt_small_town
	is_triggered_only = yes

	hide_from = yes
	hide_new = yes
	
	option = {
		name = emf_autolander.6.opt.a
		
		create_random_steward = {
			random_traits = yes
			religion = ROOT
			culture = ROOT
			dynasty = random
			female = no
			fertility = 0.5
			health = 5
		}
		new_character = {
			hidden_tooltip = {
				if = {
					limit = {
						religion_group = indian_group
					}
					add_trait = kshatriya
					character_event = { id = RoI.30121 }
				}
				
				random_list = {
					10 = { change_stewardship = 5 }
					10 = { change_martial = 5 }
				}
				
				character_event = { id = emf_autolander.10 } # Grant target_county
			}
		}
		
		hidden_tooltip = {
			character_event = { id = emf_autolander.3 }
		}
	}
	
	option = {
		name = emf_autolander.6.opt.b
		trigger = {
			FROMFROMFROM = {
				not = { character = ROOT }
			}
		}
		
		FROMFROMFROM = {
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_councillor
				}
			}
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family_councillor
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_other
				}
			}
			hidden_tooltip = {
				character_event = { id = emf_autolander.10 } # Grant target_county
			}
		}
		
		hidden_tooltip = {
			character_event = { id = emf_autolander.3 }
		}
	}
	
	option = {
		name = emf_autolander.6.opt.c
		trigger = {
			FROMFROM = {
				not = { character = ROOT }
			}
		}
		
		FROMFROM = {
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_councillor
				}
			}
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family_councillor
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_other
				}
			}
			
			hidden_tooltip = {
				character_event = { id = emf_autolander.10 } # Grant target_county
			}
		}
		
		hidden_tooltip = {
			character_event = { id = emf_autolander.3 }
		}
	}
	
	option = {
		name = emf_autolander.6.opt.d
		
		hidden_tooltip = {
			# NOTE: Not removing the emf_mod_recently_acquired in this case to enable multiple runs,
			# but to avoid an infinite loop of prompts (continually asking about the same provinces
			# rather than exiting), we flag the county title. A second run will clear all such flags
			# first, although with the current design, we will leave some flags lingering if there
			# is no second run (no big deal).
			
			event_target:target_county = {
				set_title_flag = emf_autolander_spare
			}

			clear_event_target = target_county
			character_event = { id = emf_autolander.3 }
		}
	}
}


# emf_autolander.8 [Character]
#
# ROOT was a best_fit_character_for_title candidate for event_target:target_county.
# If he is worthy of appearing on the land-grant prompt, then we will mark him with
# a character flag 'grant_ok'.

character_event = {
	id = emf_autolander.8
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_alive = yes
		prisoner = no
		FROM = {
			primary_title = {
				or = {
					not = {
						has_law = succ_gavelkind
						has_law = succ_elective_gavelkind
					}
					current_heir = {
						not = { character = ROOT }
					}
				}
				or = {
					not = { has_law = succ_patrician_elective }
					not = {
						and = {
							current_heir = {
								character = ROOT
								dynasty = FROM
								is_landed = no
							}
							event_target:target_county = {
								is_republic = no
							}
						}
					}
				}
			}
		}
	}
	
	immediate = {
		#log = "emf_autolander.8: cleared for grant: '[Root.GetTitledName]'"
		set_character_flag = grant_ok
	}
}


# emf_autolander.9 [Player]
#
# The province capital of event_target:target_county is flipped when possible
# to match republican or feudal character types. This is done before
# best_fit_character_for_title analysis.
character_event = {
	id = emf_autolander.9
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		event_target:target_county = {
			location = {
				not = {
					any_province_holding = {
						is_capital = yes
						or = {
							and = {
								ROOT = { is_republic = yes }
								holding_type = city
							}
							and = {
								ROOT = { is_feudal = yes }
								holding_type = castle
							}
						}
					}
				}
			}
		}
	}
	
	immediate = {
		event_target:target_county = {

			# Note that this approach _may_ theoretically make under-construction minor holdings
			# province capitals (haven't tested any/random_province_holding for this). If this
			# turns out to be true, then just check the barony for any succession law. A holding
			# under construction should have no laws.
			
			location = {
				random_province_holding = {
					limit = {
						holder = ROOT
						or = {
							and = {
								ROOT = { is_republic = yes }
								holding_type = city
							}
							and = {
								ROOT = { is_feudal = yes }
								holding_type = castle
							}
						}
					}
					province_capital = yes
				}
			}
		}
	}
}


# emf_autolander.10 [Grantee]
#
# FROM grants event_target:target_county and any minor holdings in it to ROOT
character_event = {
	id = emf_autolander.10
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		event_target:target_county = {

			# Grant the county
			grant_title = ROOT
			
			# Grant any remaining minor holdings
			FROM = {
				any_demesne_title = {
					limit = {
						tier = baron
						de_jure_liege = event_target:target_county
					}
					grant_title = ROOT
				}
			}

			location = {
				remove_province_modifier = emf_mod_recently_acquired
			}
		}
		
		clear_event_target = target_county
	}
}
