namespace = emf_autolander
	
# TODO:
# - Support gender_equality and succ_enatic_cognatic and succ_enatic: pick females too
#   when appropriate.
# - Support automatic distribution of recently-built titles baron-tier titles that cannot
#   be legally held by the liege (e.g., if you build a couple new cities in your demesne
#   and aren't a patrician, then autolander should be able to automate grants of those
#   titles with characters specifically suited for the holding_type (e.g., priests holding
#   new temples for non-muslims).
# - Potentially support the option of converting a feudal county into a republican county
#   or vice versa if both a castle and a city are newly-acquired within the county. Could
#   do the same for promoting prince-bishropics or feudalizing them. It would simply be a
#   matter of being sure to grant the new noble the proper type of holding first, then making
#   that holding the province_capital.


# emf_autolander.1
# Title transfer listener for applying Recently Acquired
#
# Taps: on_new_holder (grants + territory gained through gain_all_occupied_titles)
#       on_new_holder_usurpation (general usurpation)
#       on_new_holder_inheritance (inheritance)
#
character_event = {
	id = emf_autolander.1
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes
	
	ai = no
	
	trigger = {
		FROM = {
			tier = count
		}
	}
	
	immediate = {
		FROM = {
			location = {
				remove_province_modifier = emf_mod_recently_acquired
				add_province_modifier = { name = emf_mod_recently_acquired duration = 120 }
			}
		}
	}
	
	option = { name = OK }
}

character_event = {
	id = emf_autolander.2
#	desc = emf_autolander.2.desc
#	picture = GFX_evt_emissary
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		any_demesne_title = {
			limit = {
				tier = count
				has_title_flag = emf_autolander_spare
			}
			clr_title_flag = emf_autolander_spare
		}
		character_event = { id = emf_autolander.3 }
	}
	
#	option = {
#		name = emf_autolander.2.opt.a
#		character_event = { id = emf_autolander.3 }
#	}
#	option = {
#		name = emf_autolander.2.opt.b
#		set_character_flag = emf_autolander_republic
#		character_event = { id = emf_autolander.3 }
#		clr_character_flag = emf_autolander_republic
#	}
}

# Give away our recently acquired provinces
character_event = {
	id = emf_autolander.3
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		any_demesne_title = {
			tier = count
			not = { has_title_flag = emf_autolander_spare }
			location = {
				has_province_modifier = emf_mod_recently_acquired
			}
			not = {
				ROOT = {
					capital_scope = {
						duchy = {
							de_jure_vassal_or_below = PREVPREVPREV
						}
					}
				}
			}
			can_be_given_away = yes
		}
	}
	
	option = {
		name = OK
		
		random_demesne_title = {
			limit = {
				tier = count
				not = { has_title_flag = emf_autolander_spare }
				location = {
					has_province_modifier = emf_mod_recently_acquired
				}
				not = {
					ROOT = {
						capital_scope = {
							duchy = {
								de_jure_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				can_be_given_away = yes
			}
			save_event_target_as = target_county
			location = { save_event_target_as = target_province }
			ROOT = { character_event = { id = emf_autolander.4 } } # Prompt to give it away
		}
	}
}


character_event = {
	id = emf_autolander.4
	desc = emf_autolander.4.desc
	picture = GFX_evt_small_town
	is_triggered_only = yes
	
	hide_from = yes
	hide_new = yes

	immediate = {
		if = {
			limit = {
				event_target:target_county = {
					num_fitting_characters_for_title = 2
				}
			}
			event_target:target_county = {
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 1 				# The index of the character in the list
					save_event_target_as = char_one
				}
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 2 				# The index of the character in the list
					save_event_target_as = char_two
				}
				break = yes
			}
		}
		if = {
			limit = {
				event_target:target_county = {
					num_fitting_characters_for_title = 1
				}
			}
			event_target:target_county = {
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 1 				# The index of the character in the list
					save_event_target_as = char_one
				}
			}
		}
	}
	
	option = {
		name = emf_autolander.4.opt.a
		
		create_random_steward = {
			random_traits = yes
			religion = ROOT
			culture = ROOT
			dynasty = random
			female = no
			fertility = 0.5
			health = 5
		}
		new_character = {
			hidden_tooltip = {
				if = {
					limit = {
						religion_group = indian_group
					}
					add_trait = kshatriya
					character_event = { id = RoI.30121 }
				}
				
				character_event = { id = emf_autolander.5 }
				character_event = { id = emf_autolander.6 }
			}
		}
		
		hidden_tooltip = {
			event_target:target_province = { remove_province_modifier = emf_mod_recently_acquired }
			clear_event_target = char_one
			clear_event_target = char_two
			clear_event_target = target_province
			clear_event_target = target_county
			if = {
				limit = {
					multiplayer = yes
				}
				character_event = { id = emf_autolander.3 days = 1 }
				break = yes
			}
			character_event = { id = emf_autolander.3 }
		}
	}
	
	option = {
		name = emf_autolander.4.opt.b
		trigger = {
			event_target:char_one = {
				is_alive = yes
				prisoner = no
			}
			
			# Avoid accidentally putting the gavelkind primary heir within easy clicking range (can go badly)
			primary_title = {
				or = {
					not = {
						has_law = succ_gavelkind
						has_law = succ_elective_gavelkind
					}
					current_heir = {
						not = { character = event_target:char_one }
					}
				}
			}
		}
		
		event_target:char_one = {
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_councillor
				}
			}
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family_councillor
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_other
				}
			}
			hidden_tooltip = {
				character_event = { id = emf_autolander.5 }
				character_event = { id = emf_autolander.6 }
			}
		}
		
		hidden_tooltip = {
			event_target:target_province = { remove_province_modifier = emf_mod_recently_acquired }
			clear_event_target = char_one
			clear_event_target = char_two
			clear_event_target = target_province
			clear_event_target = target_county
			if = {
				limit = {
					multiplayer = yes
				}
				character_event = { id = emf_autolander.3 days = 1 }
				break = yes
			}
			character_event = { id = emf_autolander.3 }
		}
	}
	
	option = {
		name = emf_autolander.4.opt.c
		trigger = {
			event_target:char_two = {
				is_alive = yes
				prisoner = no
			}
			event_target:char_one = { not = { character = event_target:char_two } } # Weird case

			# Avoid accidentally putting the gavelkind primary heir within easy clicking range (can go badly)
			primary_title = {
				or = {
					not = {
						has_law = succ_gavelkind
						has_law = succ_elective_gavelkind
					}
					current_heir = {
						not = { character = event_target:char_two }
					}
				}
			}
		}
		
		event_target:char_two = {
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_councillor
				}
			}
			if = {
				limit = {
					or = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family_councillor
				}
			}
			if = {
				limit = {
					not = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_other
				}
			}
			hidden_tooltip = {
				character_event = { id = emf_autolander.5 }
				character_event = { id = emf_autolander.6 }
			}
		}
		
		hidden_tooltip = {
			event_target:target_province = { remove_province_modifier = emf_mod_recently_acquired }
			clear_event_target = char_one
			clear_event_target = char_two
			clear_event_target = target_province
			clear_event_target = target_county
			if = {
				limit = {
					multiplayer = yes
				}
				character_event = { id = emf_autolander.3 days = 1 }
				break = yes
			}
			character_event = { id = emf_autolander.3 }
		}
	}
	
	option = {
		name = emf_autolander.4.opt.d
		
		hidden_tooltip = {
			# NOTE: Not removing the emf_mod_recently_acquired in this case to enable multiple runs,
			# but to avoid an infinite loop of prompts (continually asking about the same provinces
			# rather than exiting), we flag the county title. A second run will clear all such flags
			# first, although with the current design, we will leave some flags lingering if there
			# is no second run (no big deal).
			
			event_target:target_county = {
				set_title_flag = emf_autolander_spare
			}
			
			clear_event_target = char_one
			clear_event_target = char_two
			clear_event_target = target_province
			clear_event_target = target_county
			if = {
				limit = {
					multiplayer = yes
				}
				character_event = { id = emf_autolander.3 days = 1 }
				break = yes
			}
			character_event = { id = emf_autolander.3 }
		}
	}
}


character_event = {
	id = emf_autolander.5
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		always = no
		FROM = { has_character_flag = emf_autolander_republic }
	}
	
	immediate = {
		# Switch capitals, if possible and needed 
		
		if = {
			limit = {
				event_target:target_province = {
					any_province_holding = {
						is_capital = yes
						holding_type = city
					}
				}
			}
			break = yes # Already done
		}
		if = {
			limit = {
				event_target:target_province = {
					or = {
						is_tribal = yes # (can't make tribal holdings non-capitals)
						not = {
							any_province_holding = {
								holding_type = city
								holder = FROM
							}
						}
					}
				}
			}
			break = yes # Can't be done
		}
		
		# Switch the capital to a city and grant the barony
		
		event_target:target_province = {
			random_province_holding = {
				limit = {
					holder = FROM
					holding_type = city
				}
				grant_title = ROOT # So that the character is surely converted to the correct character type (assuming they're not already landed)
				province_capital = yes
			}
		}
	}
}


character_event = {
	id = emf_autolander.6
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		event_target:target_county = {
			grant_title = ROOT
			FROM = {
				any_demesne_title = {
					limit = {
						tier = baron
						de_jure_liege = event_target:target_county
					}
					grant_title = ROOT
				}
			}
		}
	}
}
